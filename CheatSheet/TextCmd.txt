============= MarkDown ===============
* 标题： #=-
* 换行: 2空2回3-
* 列表：*+-    1.
* 字体：*+-

* 引用：>`.
* 链接: [text|url]   !#:
* 其它：转义，注释，制表
* 版本：{color}{quote}

=========== File ==================
看文件：
ls -alt    cat,head,tail,more,less,vim filename +546 (+/main)
dir tree   type,more,code -gr filename:100

建文件：
md a/b/c, touch a b      md, (rd,rm,mv,cp -ri)file tar -cvf xvf
echo .>file, type nul>>file, echo string>>file, type con>file, copy nul file

比文件：
fc diff

=========== Search ==================
搜命令：
which {command}
where /R {path} {pattern}

搜文件:
find -name "query"
dir /s *.xls 

搜字串：
grep -R  "what" "where"
findstr(find) "what" "where" 

搜库(比普通grep更快)：
git log --grep,-S -G
git ls-files "*middleware*"
git grep -nlP "hello" v2.5 -- path

=====================================
VIM:
By words: web 9jk
By paragraph: {} % (match brackets)
By marker:  ''	  '.	'x (mx)
By end: gg G  0^$ :n

* Edit: dxyp  uU.  	3p 3. 	dw yw	dd yy
* Search: /?  *#   nN  (:set hlsearch   :set noh	:set ignorecase)   /<text> to search text, among others.
* Replace: :s/old/new	:%s/old/new/g		:2,35s/old/new/giw (v-mode substitute)

* Mode: V(vV^) I(io) >>缩进 ~uU大小写 	Windows: ^=^Shift.  ^=^^
* Window: HML 	^W jk hl tb 	:sp	  (vim -op /directory/*)
* Buffer:	:e.  :ls	:b  np fl w n 
* Config: set number: vi ~/.vimrc :set nonumber :set  :syntax on

* 编程跳转：gd gD  g; g,	[[ ]]		变量定义，修改过的地方， 函数块开始
* ^N 自动完成及其翻页   ^P  ^N
========================================
grep的查找，sed的编辑，awk分析   wc=word count

grep 代表全局正则，-nil -cvr
sed  代表 "stream editor"   s: 代表 "substitution". -ir
awk  就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。

grep -R  'what' filenames
sed 's/old/new/' filenames
awk '{pattern + action}' {filenames}

awk -F: '/root/{print $7"\t"}' /etc/passwd    
指定分隔符， 指定正则，指定动作，指定路径
花括号里面其实是C语言,printf可以用awk内置变量

=======Regex================
匹配： ^$ \d\w\s\b
预查： 分组例子： (ABC)(?:ABC)     预查符号(不捕获):    ?=, ?!,   ?<=,?<!
替换： $&  $`  $' $1

?的用法有：数量，贪婪，预查5种
$的用法有：结尾，转义，替换5种






