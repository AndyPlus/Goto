=== Go Go Go ===
Show: git status, branch -v,tag, stash list, config -l --global, show, gc, help

============ Show Diff Log =============
git show master:JumpForward/Error.aspx

git diff    	  <commit>   (to be add)
git diff --cached <commit>   (to be commit)
git diff <commit> <commit>	 (=.. < ...)
git diff  <blob>  <blob>
git diff --path --path   
git diff master --name-status
git diff origin/master..master --stat 
git diff ./JFAPI (diff in subtree)
git diff branch1:file branch2:file
git diff v1..master -- JumpForward\Web.config

git log -5 -p 
git log -p HEAD..FETCH_HEAD
git log --name-status -- *proj* (-- can ignored, Can use Tab or Glob)
git log master..     (example:head, JF-9991, v2.5, remotes/origin/Sprint16) ...
git log --author=Andy (--since, --until,--no-merges,--first-parent) gitk图形化高级筛选
git log --since 12/12 (--merges  --no-merges  --reverse)

Analyse:
git log --reverse --oneline -- JumpForward.NewApi
git log --reverse --name-status --diff-filter=A
git log --pretty=format:"%h %ad%x09%an: %x09%s" --date=short --reverse

========== Revert =======================
git reset --hard HEAD^  (#配合使用 git reflog 和 git log)
git reset origin/JF-9991
git revert -n master~5..master~2
git cherry-pick master (-n)
git cherry-pick ..master  (= git cherry-pick ^HEAD master, NOT)
git cherry-pick -n master~4 master~2

Reset or revert a specific file to a specific revision using Git?
git checkout c5f567~1 -- file1 file2
git checkout develop -- file1

Merge Conflict?
git checkout JF-9991 -- <filename>
git checkout --theirs -- <filename>

---------- Grep --------------------
git grep -n "hello" v2.5      (inlevpPC3 --all-match)
git grep solution -- :^Documentation
git grep -e "str1" --and --not -e "str2"  (-v)
git grep -l -P "(?<! <> )CommunicationStatusEnum.Ended"|xargs notepad++
git grep -l -P CARAPracticeLogWeekUser|grep -P ".*(?<!.cs)$"|grep -P ".*(?<!.vb)$"
git ls-files "*middleware*"

git log --grep=JF-7813       (-i  --all-match  --invert-grep)
git log -Sword
git log -Gword   (use regex search both message and content)
git log -S "string" --source --all (search on all branch, -G regex)

git log -L 15,23:filename
git blame -L 12,22 filename
git blame -L 10,+1 fe25b6d^ -- filename

--grep, --grep-reflog, --invert-grep, --perl-regexp (-P)
git bisect (start,bad,good <revision>) 来启动二分查找。 然后build, mark(good or bad)循环，直到提示“is the first bad commit”，然后研究问题所在，之后执行git bisect reset.
glob模式匹配，比如"file[ab]"

---------- Other -----------
git branch -v -m
git add mv rm

git stash apply -h -m
git stash list
git stash apply stash@{0}

git stash --include-untracked
git stash --keep-index

git checkout -b features/subFeature
git checkout -- README.txt


git tag -l v2018*
git tag v1 1b2e1d63ff (-m)
git tag -d
git show v1
git checkout -b newbranchname tagname
git push tagname (-d)
git push --tags 

=========== Config ===========
git config -l (~/.gitconfig   .git/config)
git config --global user.email <email>
git help -g
git help glossary
git help revisions

git remote -v
git remote set-url origin git://new.url.here
git remote add otherOrigin otherUrl
git remote show origin

git update-index --skip-worktree
git update-index --no-skip-worktree
git status --ignored
git ls-files --unmerged
git ls-files -v |grep "^S"

======= revisions: =====================
Revisions:
	ref log: master@{1}   @{1}  @{-1}   master@{yesterday},  HEAD@{5 minutes ago}
	file path. HEAD:README, :README, master:./README, :0:README  (stage 1 is the common ancestor, stage 2 is the target branch’s version)

Ranges:
	time log: ^r1 r2 == r1..r2 <= r1...r2 (缺少r1或r2时默认为head)
	switch merged parents:  HEAD^2 < HEAD^@ (= all parents)

-------- Branch Prune -------------------
git gc
git remote prune -n origin
git branch --merged | xargs git branch -d
git branch | grep -v "master" | xargs git branch -D
git pull --tags --prune

git branch --no-merged 
git branch --no-contains <commit>


---------- Github Setup ---------------
git config user.name "AndyPlus"
git config user.email "andymore@live.com"
git config --global --edit

git rebase -i origin/master (pick->edit)  (or HEAD^^^)
git commit --amend --reset-author
git rebase --continue


简便合并多个commits:
$ git reset HEAD~5
$ git commit -am "Here's the bug fix that closes #28"
$ git push --force

简便查看多个commits:
$ git checkout a0^
$ git cherry-pick a0{0,1,2,3,4} （按顺序）
$ git diff master...  （或者直接 git diff a0^）
$ git checkout master

* Github flow 是Git flow的简化版，专门配合"持续发布"。
* GitLab flow 重要论述是不要用rebase 进行sqush在远程修改记录
* 减少来自master的merge commits，而是使用 cherry pick

----------------
git worktree add ..\LinkWorkTree [<commit-ish>]
git worktree list prune
git commit --amend -m "New commit message"

--
Git alias:

git config --global alias.ch checkout
git config --global alias.br branch
git config --global alias.co commit
git config --global alias.st status
git config --global alias.pu pull
git config --global alias.di diff

git config --global alias.mine 'log --no-merges --name-status --author=Andy --since=1.weeks'
git config --global alias.last 'log -3 --name-status'
git config --global alias.done 'push -u origin HEAD'
git config --list --show-origin

#提交时转换为LF，检出时转换为CRLF
git config --global core.autocrlf true  

清理分支：
git branch --merged | %{git branch -d $_.Trim()}

合并Review:
git log --grep=20608  --author=Vince --no-merges --reverse --format=format:%H
git log --since 4/1 --until 4/25 --author=andy --reverse -- *jfui*
git ch -b RF-20608 a00^
git cherry-pick        $(), |%{$_}
git diff master...

------git path specs-----------------------------

git ls-files *.json
git ls-files '*.json'

git add .      # add CWD (current working directory)
git add src/   # add src/ directory
git ls-files '*.mp?'

git log '*.js' # logs all .js files in CWD and subdirectories
git log '.*'   # logs all 'hidden' files and directories in CWD
git log '*/.*' # logs all 'hidden' files and directories in subdirectories


git ls-files '*.[tj]s'
git ls-files '*.mp[[:digit:]]' # mp0, mp1, mp2, mp3, ..., mp9
git ls-files '*[[:space:]]*' # matches any path containing a space
git ls-files ':(icase)*.jpg'
git ls-files ':(glob)src/components/**/*.jsx' # 'all' jsx components

git grep 'foo' -- '*.js' ':!*.spec.js' .       # shorthand for the same
git ls-files -- ':(top,icase,glob,attr:!vendored)src/components/*/*.jsx'