Get-Module -ListAvailable
* notepad $PROFILE
* $PSVersionTable
* $env:PSModulePath

===========================
Install-Module posh-git
Import-Module posh-git
Add-PoshGitToProfile
Git Less: set LESSCHARSET=utf-8

[{HEAD-name} S +A ~B -C !D | +E ~F -G !H W]
remote, index, workDir, overall    
https://github.com/dahlbyk/posh-git#git-status-summary-information

==============
Install-Module PSReadLine
Import-Module PSReadLine

Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -PredictionViewStyle ListView
Set-PSReadLineOption -EditMode Windows

Get-Process <Tab>
Get-Process <Shift+Tab>

Get-Process –<Ctrl+Space>
Get-Process i<Ctrl+Space>
[System.Math]::<Ctrl+Space>

help about_PSReadline
Notice the red “>” in prompt, a syntax error in this 
3+?   Ctrl+LGSR   Shift+Enter
========================
Install-Module ZLocation
Import-Module ZLocation  ($profile)

z
z -l
z jf de
z -  (popd)
=====================================
Install-Module JiraPS -Scope CurrentUser
Import-Module JiraPS

Set-JiraConfigServer https://jirafnd.dev.activenetwork.com
New-JiraSession -Credential $cred

Get-JiraIssue JF-6818

help *jira*
gcm  *jira*
======================================
Install-Module Get-ChildItemColor
Import-Module Get-ChildItemColor

Set-Alias l Get-ChildItemColor -option AllScope  #($profile)
Set-Alias ls Get-ChildItemColorFormatWide -option AllScope  #(Format-Wide not support pipeline)

ls Bug: use Tee-Object Fix

Get-Module -ListAvailable
Import-Module Get-ChildItemColor -Force

===================

Powershell WASP Autoit.
============================
## Pipeline：
@(dir *.ps1)|%{&"notepad++" $_}
dir *.ps1|%{notepad++ $_}

iex ("notepad++ " + (dir *.ps1) -join ' ')
iex ("notepad++ " + (dir *.ps1))

&"notepad++" $(dir *.ps1)
notepad++ (dir *.ps1)

git br -d $(git br --merged).trim()
git br --merged|%{git br -d $_.Trim()}

* 管道的注意事项：传递的是对象，不是字串！ 圈子不同，不要强融。git管道还是适合用bash. Windows下适合用Pwsh.
* 管道的操作思路：Get, Select, Change, Format, Out.


## Object:
$ourObject = New-Object -TypeName psobject
$ourObject | Add-Member -MemberType NoteProperty -Name ComputerName -Value $computerInfo.Name

$PSCustomObject = [PSCustomObject]@{foo = 1}
$PSCustomObject.Length

ConvertFrom-String   Out-String
ConvertFrom-StringData: Use ConvertFrom-StringData to convert a string containing one or more value pairs to a hash table. 


## ASync Job:
ForEach($Computer in $Computers){Start-Job -FilePath c:ScriptGet-OperatingSystem.ps1 -ArgumentList $Computer}
Get-Job | Wait-Job
Get-Job | Receive-Job | Out-GridView

$job=dir -r *ConnectionStrings.config &
$files=(Receive-Job -Wait $job|select FullName)

$job=gps &
Receive-Job $job -Wait

## PowerShell Debug:
* https://github.com/PowerShell/PowerShell/blob/master/docs/learning-powershell/debugging-from-commandline.md
* Test-Path works with variables, certificates, aliases, and functions. Check out this post from TechNet for more details (@MS_ITPro).
* Debug-Process, Disable-PSBreakpoint, Get-Counter, Measure-Command, Measure-Object, Start-Sleep, Tee-Object, Trace-Command, Write-Debug, Write-Progress
* Measure-Command { 1..100000 | % {Get-Random -Minimum 1 -Maximum 10000} | Group-Object }

* https://activedirectoryfaq.com/2016/01/use-net-code-c-and-dlls-in-powershell/
Add-Type -AssemblyName .\JFDLLs\JumpForward.Helpers.dll -PassThru
[JumpForward.Helpers.Encryption]::SecuredEncryptTripleDES("29227,309,119")
