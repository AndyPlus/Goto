Redux:

核心思想： 整个Web应用是一个状态机，所有状态保存在一个Store里。State是Store的时间轴快照，View是State的表象，Action是改变State的唯一方法。

* Action 是一个对象。其中的type属性是必须的， 它是对象。 Action Creator是用来返回各种type的Action对象的方法，他是方法。
* Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。
  
* const store = createStore(reducer);
* const action  = ()             => ({type,payload})
* const reducer = (state,action) => {switch by type, return state+payload };
  
* Store 提供了三个方法：store.getState()  store.dispatch()  store.subscribe()  分别类比：属性，方法，事件。
* store.dispatch()是 View 派发 Action 到store 的唯一方法。 注意，Dispatcher 只能有一个，而且是全局的。 Dispatcher 只用来派发 Action，不应该有其他逻辑
* store.subscribe可以为state的变化而设置监听函数

---------------
概念术语

Flux VS MVC 架构 (a unidirectional data flow)
1.View： 视图层，是一个纯组件（即不含有任何状态），从而方便了测试和复用。
2.Action（动作）：视图层发出的消息（比如mouseClick）
3.Dispatcher（派发器）：用来接收Actions、执行回调函数
4.Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面


* Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。State变化则View变化。
* 什么这个函数叫做 Reducer 呢？因为它可以作为数组的reduce方法的参数。 Array.Reduce()传入函数，将数组批量执行。
* MDN: Array.reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。



=======React-Redux ========================
http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html

* React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。
* UI组件是纯组件，完全由参数决定，没有使用this.state,所有数据由参数this.props提供，不用任何reduxAPI，无任何业务逻辑。容器组件的特征恰恰相反。
* React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。
 
* React-Redux 1.提供Provider组件，可以让容器组件拿到state。2.提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。
* mapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。
* mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。

----------------------

connectJs连接三个  state(reducer) + action(logic api) + module(view react) ,这三者都分为Setup阶段和Execute阶段：
* 其中Reducer方法传入当前状态和持续的Action对象，然后根据Action的type和payload来产生一个新的状态。
* 其中Action类中的方法有两种ActionCreator和Dispatcher,前者负责创建Action对象，后者负责路由通知Reducer.
* 其中Compnents类中，首先执行底部的方法ConnnectJs进行相关设置，然后构造器方法和初始化方法，最后执行Render方法。
 
------------------
 
https://react-redux.js.org/introduction/quick-start


import { Provider,connect  } from 'react-redux'
import store from './store'
import { resetAction } from './actionCreators'

render(){return <Provider store={store}>}

const mapStateToProps = (state,ownProps) => {return {value: state.value}}
const mapDispatchToProps = { resetAction, }
export default connect(mapStateToProps,mapDispatchToProps)(Counter)


=============
对比学习官方例子和自己例子：重点看connect部分。注意官方目录components 和 containers中文件的命名规范（有无状态）。actions中只是定义了一个actionCreator集合，reducer中只是定义了一个reducer集合。
https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos
https://gitlab.dev.activenetwork.com/JumpForward/JFUI/merge_requests/189/diffs


