React:

* React 的核心思想是：封装组件。
* JSX 语法：   < 开头  { 开头

React组件：   
* 组件的用法与原生的 HTML 标签完全一致， 
* 组件的属性可以在组件类的 this.props 对象上获取（class = className ，for = htmlFor） 
* React 提供一个工具方法 React.Children 来处理 this.props.children
* 组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求
* 有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性

组件生命周期：
* Mounting：已插入真实 DOM
* Updating：正在被重新渲染
* Unmounting：已移出真实 DOM

* this.state： 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动 ，由于 this.props状态不变化  和 this.state 状态变化后自动调用this.render()
* style={{opacity: this.state.opacity}}：   这是因为 React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。
* Ajax: 组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 componentDidMount 方法设置 Ajax 请求，等到请求成功，再用 this.setState 方法重新渲染 UI 
* 表单内容： 文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange 事件的回调函数，通过 event.target.value 读取用户输入的值

================

React API参考:
https://zh-hans.reactjs.org/docs/react-component.html
https://zh-hans.reactjs.org/docs/hooks-reference.html

##基本原理
JSX js扩展语法，混合babel
React.createElement("h1", props:{className: 're-add'}, "Hello", name);
ReactDOM.render(element, container);

## this.props & this.state
* state = {open: false};
* this.setState({ value: true })
* this.setState(prevState => ({newState}));
* handleChange(e) {this.setState({ value: e.target.value });}

* this.interval = setInterval(() => this.tick(), 1000);
* <div dangerouslySetInnerHTML={__html: 'abcd'}/>
* key 是 React 当中使用的一种特殊的属性（除此之外还有 ref 属性）, 组件的 keys 值只需要在当前的节点里保证唯一即可。默认可以用index i.


## immutable
React 元素都是immutable 不可变的。所有的React组件必须像纯函数那样使用它们的props。更新界面的唯一办法是创建一个新的元素，然后将它传入 ReactDOM.render() 方法：	
* player.score = 2;  //可变写法
* var newPlayer = Object.assign({}, player, {score: 2});  //不可变写法
* var newPlayer = {...player, score: 2};  // 或使用对象分隔符语法


## 定义组件：用ES6 class或者 传统 function
* 在使用 JavaScript classes 时，你必须调用 super(); 方法才能在继承父类的子类中正确获取到类型的 this
* 函数定义组件: 只有render方法的组件,以下 changeItem实际就是render方法。function changeItem(props){return ()}  可以加前缀 export default
* 定义时：删除 constructor(因为不需要state了),把 this.props 替换为 props， 注意 onClick={props.onClick} 不能写成 onClick={props.onClick()}   


## handleClick
* 采用 JSX 的语法你需要传入一个函数作为事件处理函数<button onClick={activateLasers}>，而不是一个字符串<button onclick="activateLasers()">
* 使用时：如果你没有在方法后面添加 () ，例如 onClick={this.handleClick}，你应该为这个方法绑定 this。例如：onClick={this.deleteRow.bind(this, id)}
* 参数 e 作为 React 事件对象将会被作为第二个参数进行隐形传递， 事件取值：e.target.value,name,type   阻止冒泡和默认事件： e.stopPropagation() e.preventDefault()



## 高级：
* 受控组件 和 非受控组件，受控组件要注意处理多个表单元素提交，还要解决ECHO问题，考虑使用非受控组件
* 状态提升，建议将共享状态提升到最近的共同父组件中去。 自上到下的数据流，你可以使用 React 开发者工具来检查props属性
* 组合优于继承(FaceBook几乎从来不用继承)，一些组件不能提前知道它们的子组件是什么，如Dialog: <div className={'dialog'}>{props.children}</div>

## FAQ:
https://zh-hans.reactjs.org/docs/faq-structure.html
https://zh-hans.reactjs.org/docs/faq-functions.html
https://zh-hans.reactjs.org/docs/faq-ajax.html
https://zh-hans.reactjs.org/docs/faq-state.html


## 设计理念: 
https://zh-hans.reactjs.org/docs/thinking-in-react.html
https://zh-hans.reactjs.org/docs/react-component.html


==========================
官网笔记第二次阅读：

JSX符号： <>和{}  推荐用()罩住“React元素”
高内聚： React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，所以用JSX。
低耦合：用“组件”分割到不同文件内，实现了关注点分离。
项目文件的结构不要过度思考，把经常需要一起修改的文件放一起即可。

用“JSX扩展”语法定义“React元素”对象。 
用“React元素”来构建“React组件”对象。
组件是一个函数（或类），入参为props,返回一个"React元素"

组件名称必须大写开头，因为小写为原生HTML
组件属性必须camel格式，因为遵循js语法标准。

state是组件内部，props连接组件外部。
state是可异步更新setState()的，props是只读的。
state只能在class组件中使用，不能在function组件里。

state是“单向”的数据流。任何的 state 总是所属于特定的组件
如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。
一个组件可以由无state的函数组件，逐渐进化成有state的，有生命周期的类组件。

事件处理：
使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。 因为遵循的是js标准啊。
在handleClick(e)方法中阻止默认行为用  e.preventDefault();
绑定事件最简单方法（稍有性能问题）： <button onClick={(e) => this.handleClick(id, e)}>

条件渲染:
bool && <>
三目
return null;

map: <li key={index}>


React 最棒的部分之一是引导我们思考如何构建一个应用。
1.自顶向下拆分组件，用props向下传递数据。只需要render()方法定义静态组件。
2.定义一个state的最小集合，为UI添加交互能力实现动态组件。
3.根据需要把state提升到父级组件用props向下传递，最高提升到Redux的Store中。
4.用回调函数实现反向数据流，因为React仅仅支持自上而下单向流动，且不支持双向绑定。	



React.Component常用的生命周期方法：
1. 挂载时： 当组件实例被创建并插入 DOM 中时。 依次为： constructor(仅用于内部初始化)  render(纯函数，监测props和state变化，返回element或fragments)  componentDidMount(ajax,添加订阅，浏览器交互)
2. 更新时： 当组件的 props 或 state 发生变化时会触发更新。 依次为： render()  componentDidUpdate()	
3. 卸载时： 当组件从 DOM 中移除时。 componentWillUnmount()
	

==========================
新版Hook：

Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则
只能在React函数组件最外层调用 Hook。不要在循环、条件判断或者子函数中调用。

useState 给组件添加一些内部state。
useEffect 给函数组件增加了操作副作用的能力.
useContext 让你不使用组件嵌套就可以订阅 React 的 Context。
useReducer 可以让你通过 reducer 来管理组件本地的复杂 state。

你之前可能已经在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。
它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。
useEffect 可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除，所以需要返回一个函数.第二个传入参数用来判断仅在变化时执行Effect

import React, {useState, useEffect,useContext, useReducer,useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useDrop } from 'react-dnd';

const [count, setCount] = useState(0);
const theme = useContext(ThemeContext);
const [todos, dispatch] = useReducer(todosReducer);

useEffect(() => {document.title = `Clicked ${count} times`; return () => {}}, [count])
<button onClick={() => setCount(count + 1)} />

https://zh-hans.reactjs.org/docs/hooks-effect.html